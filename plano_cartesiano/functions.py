class Function():#f(x) = ax + b; with a != 0
    """
    This class simulates a polynomial function of degree one,
    of type f (x) = ax + b. it has two parameters:
    -a: is the slope of the function
    -b: is the independet term of the function
    """
    def __init__(self, value_a, value_b):		
        self.a = value_a
        self.b = value_b

    def get_a(self):
        """
        Return the value of "a"
        """
        return self.a

    def get_b(self):
        """
        Return the value of "b"
        """
        return self.b

    def get_law(self):#this is only visual
        """
        This method is a way to see the law of function mathematically
        """
        law = ''
        if self.get_a() == 0:
            law = f'f(x) = {self.get_b()}'
        else:
            if self.get_a() == -1:
                law = 'f(x) = -x'
            elif self.get_a() == 1:
                law = 'f(x) = x'
            else:
                law = f'f(x) = {self.get_a()}x'

            if self.get_b() > 0:
                law += f' + {self.get_b()}'
            elif self.get_b() == 0:#if a != 0 and b = 0; so the law is "ax"
                law += ''
            else:
                law += f' - {-1*self.get_b()}'
        return law

    def get_point(self, value_x):
        """
        Return a Point objetic of the point.py
        this point has the first coordinate to pass as a function parameter,
        and the second is calculated based on its law
        """    
        value_y = self.get_a() * value_x + self.get_b()
        return Point(value_x, value_y)

    def get_func_int(self, start=0, end=0):
        """
        Parameters
        __________
        -start: this is the firt value of the interval
        -end: the last value of the interval

        returns a list containing points, where its first coordinate belongs
        to the set of integers. These points are generated by the "get_point"
        method.
        """
        values = []
        for x in range(start, end+1):
            generated_point = self.get_point(x)
            values.append(generated_point)
        return values

    def get_solution_func(self):
        """
        This method does not require any parameters and returns an object of
        class Point in the file point.py
        this point generated has the coordinates in which the value of y will
        be zero, that is, the solution of the function:
        f(x) = ax + b
        0 = ax + b
        """
        try:
            sol = -(self.get_b())/self.get_a()
            sol = turn_int(sol)
        except:
            raise Exception('constant functions (a = 0) doesn\'t has solution')
        return Point(sol, 0)
        
    def get_func_int_txt(self, start=0,end=0):
        """
        Parameters
        __________
        -start: this is the firt value of the interval
        -end: the last value of the interval

        returns a string containing points, where its first coordinate belongs
        to the set of integers. These points are generated by the "get_point"
        method. (the points are generated from the method "get_func_int"
        """
        values = self.get_func_int(start, end)
        str_sol = ''
        for x in values:
            str_sol += x.get_location()
            str_sol += '\n'
        return str_sol

    def set_a(self, new_a):
        self.a = new_a

    def set_b(self, new_b):
        self.b = new_b

def turn_int(x):
    """
    Change a float number to a integer number, if the numeric value is the same
    """
    if x == int(x):
        return int(x)
    return x
